name: Fitness Reporting Workflow

on:
  # Scheduled runs - configurable via cron
  schedule:
    # Default: Run daily at 5:00 PM London time (UTC+0/UTC+1)
    # You can modify this cron expression to change frequency
    # Examples:
    # - cron: '0 17 * * *'    # Daily at 5:00 PM London time
    # - cron: '0 17 * * 1-5'  # Weekdays only at 5:00 PM London time
    # - cron: '0 9,17 * * *'  # Twice daily at 9:00 AM and 5:00 PM London time
    # - cron: '0 17 * * 1'    # Every Monday at 5:00 PM London time
    # - cron: '0 17 1,15 * *' # 1st and 15th of each month at 5:00 PM London time
    # - cron: '0 */6 * * *'   # Every 6 hours
    # - cron: '0 9-18/2 * * 1-5' # Every 2 hours during business hours (9 AM - 6 PM London time, weekdays)
    - cron: '30 19 * * *'
  
  # Manual trigger with inputs
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (skip actual email sending)'
        required: false
        default: false
        type: boolean
      custom_email_to:
        description: 'Override primary email recipient for this run'
        required: false
        default: ''
        type: string
      custom_email_cc:
        description: 'Override CC recipients for this run (comma-separated)'
        required: false
        default: ''
        type: string
      skip_notifications:
        description: 'Skip push notifications for this run'
        required: false
        default: false
        type: boolean

env:
  # Set environment to production for scheduled runs
  ENVIRONMENT: production
  # Enable LangSmith tracing
  LANGCHAIN_TRACING_V2: true
  LANGCHAIN_PROJECT: Charles-Fitness-report
  LANGCHAIN_ENDPOINT: https://api.smith.langchain.com

jobs:
  fitness-reporting:
    name: Fitness Reporting
    runs-on: ubuntu-latest
    
    # Add timeout to prevent hanging jobs
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser chromium-chromedriver
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create credentials files
      run: |
        # Create credentials.json from secret
        echo '${{ secrets.GMAIL_CREDENTIALS }}' > credentials.json
        
        # Create token.json from secret (ensure proper JSON formatting)
        echo '${{ secrets.GMAIL_TOKEN }}' > token.json
        
        # Verify files exist and have content
        ls -la credentials.json token.json
        echo "Credentials file size: $(wc -c < credentials.json) bytes"
        echo "Token file size: $(wc -c < token.json) bytes"
        
        # Validate JSON format
        echo "Validating JSON format..."
        if python3 -c "import json; json.load(open('credentials.json'))"; then
          echo "‚úÖ credentials.json is valid JSON"
        else
          echo "‚ùå credentials.json is not valid JSON"
          exit 1
        fi
        
        if python3 -c "import json; json.load(open('token.json'))"; then
          echo "‚úÖ token.json is valid JSON"
        else
          echo "‚ùå token.json is not valid JSON"
          exit 1
        fi
    
    - name: Set environment variables
      run: |
        # Core configuration
        echo "GMAIL_ADDRESS=${{ secrets.GMAIL_ADDRESS }}" >> $GITHUB_ENV
        echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
        echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> $GITHUB_ENV
        echo "SUPABASE_EMAIL=${{ secrets.SUPABASE_EMAIL }}" >> $GITHUB_ENV
        echo "SUPABASE_PASSWORD=${{ secrets.SUPABASE_PASSWORD }}" >> $GITHUB_ENV
        echo "PUSHOVER_USER_KEY=${{ secrets.PUSHOVER_USER_KEY }}" >> $GITHUB_ENV
        echo "PUSHOVER_TOKEN=${{ secrets.PUSHOVER_TOKEN }}" >> $GITHUB_ENV
        echo "SQLITE_API_KEY=${{ secrets.SQLITE_API_KEY }}" >> $GITHUB_ENV
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
        echo "SUPABASE_API_URL=${{ secrets.SUPABASE_API_URL }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
        echo "LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}" >> $GITHUB_ENV
        echo "LANGSMITH_PROJECT=${{ secrets.LANGSMITH_PROJECT }}" >> $GITHUB_ENV
        
        # LLM Model Configuration for Multi-Model Setup
        echo "LLM_PROVIDER_1=openai" >> $GITHUB_ENV
        echo "LLM_MODEL_1=gpt-4o-mini" >> $GITHUB_ENV
        echo "LLM_PROVIDER_2=anthropic" >> $GITHUB_ENV
        echo "LLM_MODEL_2=claude-3-5-sonnet-20241022" >> $GITHUB_ENV
        echo "LLM_PROVIDER_3=google" >> $GITHUB_ENV
        echo "LLM_MODEL_3=gemini-1.5-flash" >> $GITHUB_ENV
        
        # Email configuration - use secrets or workflow inputs
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.custom_email_to }}" ]; then
          echo "EMAIL_TO=${{ github.event.inputs.custom_email_to }}" >> $GITHUB_ENV
        else
          echo "EMAIL_TO=${{ secrets.EMAIL_TO }}" >> $GITHUB_ENV
        fi
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.custom_email_cc }}" ]; then
          echo "EMAIL_CC=${{ github.event.inputs.custom_email_cc }}" >> $GITHUB_ENV
        else
          echo "EMAIL_CC=${{ secrets.EMAIL_CC }}" >> $GITHUB_ENV
        fi
        

        echo "EMAIL_SUBJECT_PREFIX=${{ secrets.EMAIL_SUBJECT_PREFIX }}" >> $GITHUB_ENV
        
        # Handle notifications
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.skip_notifications }}" = "true" ]; then
          echo "EMAIL_SEND_NOTIFICATIONS=false" >> $GITHUB_ENV
        else
          echo "EMAIL_SEND_NOTIFICATIONS=${{ secrets.EMAIL_SEND_NOTIFICATIONS }}" >> $GITHUB_ENV
        fi
        
        # Test mode configuration
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          echo "TEST_MODE=true" >> $GITHUB_ENV
          echo "EMAIL_SEND_NOTIFICATIONS=false" >> $GITHUB_ENV
        else
          echo "TEST_MODE=false" >> $GITHUB_ENV
        fi
    
    - name: Display configuration
      run: |
        echo "üîß Workflow Configuration:"
        echo "=========================="
        echo "Event Type: ${{ github.event_name }}"
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Test Mode: ${{ env.TEST_MODE }}"
        echo "Primary Email: ${{ env.EMAIL_TO }}"
        echo "CC Emails: ${{ env.EMAIL_CC }}"
        echo "Send Notifications: ${{ env.EMAIL_SEND_NOTIFICATIONS }}"
        echo "Subject Prefix: ${{ env.EMAIL_SUBJECT_PREFIX }}"
        
        echo ""
        echo "ü§ñ LLM Model Configuration:"
        echo "LLM_PROVIDER_1: ${{ env.LLM_PROVIDER_1 }}"
        echo "LLM_MODEL_1: ${{ env.LLM_MODEL_1 }}"
        echo "LLM_PROVIDER_2: ${{ env.LLM_PROVIDER_2 }}"
        echo "LLM_MODEL_2: ${{ env.LLM_MODEL_2 }}"
        echo "LLM_PROVIDER_3: ${{ env.LLM_PROVIDER_3 }}"
        echo "LLM_MODEL_3: ${{ env.LLM_MODEL_3 }}"
        
        echo ""
        echo "üîë API Keys Status:"
        echo "OPENAI_API_KEY: ${OPENAI_API_KEY:+SET}"
        echo "ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:+SET}"
        echo "GOOGLE_API_KEY: ${GOOGLE_API_KEY:+SET}"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo ""
          echo "üìù Manual Run Parameters:"
          echo "Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "Custom Email To: ${{ github.event.inputs.custom_email_to }}"
          echo "Custom Email CC: ${{ github.event.inputs.custom_email_cc }}"
          echo "Skip Notifications: ${{ github.event.inputs.skip_notifications }}"
        fi
    
    - name: Run fitness reporting workflow
      run: |
        echo "üöÄ Starting fitness reporting workflow..."
        
        # Set Python path
        export PYTHONPATH="${PYTHONPATH}:${PWD}"
        
        # Debug: Check if token files exist and their content
        echo "üîç Debug: Checking token files..."
        ls -la *.json
        echo "Token file first few lines:"
        head -3 token.json
        
        # Run the workflow
        python3 reporting_workflow.py
        
        echo "‚úÖ Fitness reporting workflow completed"
    
    - name: Upload workflow logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: workflow-logs-${{ github.run_id }}
        path: |
          *.log
          validation_result_*.json
          fitness_data_*.json
          *.xlsx
        retention-days: 7
    
    - name: Cleanup sensitive files
      if: always()
      run: |
        rm -f credentials.json token.json
        echo "‚úÖ Sensitive files cleaned up"
    
    - name: Workflow summary
      if: always()
      run: |
        echo "üìä Workflow Summary:"
        echo "==================="
        echo "Repository: ${{ github.repository }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Event: ${{ github.event_name }}"
        echo "Status: ${{ job.status }}"
        echo "Duration: ${{ steps.fitness-reporting.outputs.duration }}"
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Workflow completed successfully"
        else
          echo "‚ùå Workflow failed or was cancelled"
        fi
